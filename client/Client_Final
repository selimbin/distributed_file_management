import socket
import asyncio
import socket
import uuid

class FileClient:
    def __init__(self, host, port):
        self.host = host
        self.port = port
        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.client_socket.connect((self.host, 12345))
        self.queue = []

    def test(self):
        print('test')
        while True:
            if len(self.queue) > 0:
                request = self.queue.pop(0)
                self.client_socket.send(request.encode())
                print("Message sent to server:", request)
                response = self.client_socket.recv(1024).decode()
                print(response)

    async def send_request(self, request):
        # self.queue.append(request)
        self.client_socket.send(request.encode())
        response = self.client_socket.recv(1024).decode()
        print(response)
        return response
    
    # #unique_id = input("'Enter unique id:', str(uuid.uuid4()")
    # async def unique_id(self, unique_id): 
    #     await self.send_request(f'input {uuid.uuid4()}')

    # async def get_unique_id(self):
    #     user_provided_id = input('Enter unique id : ')
    #     self.unique_id = str(uuid.uuid4())

        #self.unique_id = user_provided_id or str(uuid.uuid4())

    # async def unique_id(self, user_provided_id):
    #     # Use the user-provided ID if it's not empty, otherwise generate a new one
    #     return user_provided_id if user_provided_id else str(uuid.uuid4())
    

    async def create(self, filename, unique_id):
        request = f'CREATE {filename} {unique_id}'
        await self.send_request(request)

    # async def create(self, filename):
    #     await self.send_request(f'CREATE {filename}')

    async def edit(self, filename, new_content, unique_id):
        request = f'EDIT {filename} {new_content} {unique_id}'
        await self.send_request(request)

    async def delete(self, filename, unique_id):
        request = f'DELETE {filename} {unique_id}'
        await self.send_request(request)

    # async def read(self, filename):
    #     response = await self.send_request(f'READ {filename}')
    #     # response = await self.client_socket.recv(1024).decode()
    #     if response != 'File not found':
    #         print(f'File content:\n{response}')
    #     else:
    #         print(f'File not found: {filename}')

    async def write(self, filename, content, unique_id):
        request = f'WRITE {filename} {content} {unique_id}'
        await self.send_request(request)

    def close_connection(self):
        self.send_request('EXIT')
        self.client_socket.close()

    async def client_input(client):
        while True:

            # unique_id = input('"Enter unique id:", str(uuid.uuid4()')
            # client.unique_id(unique_id)
            
            #await client.get_unique_id()
            # user_provided_id = input('Enter unique id :')
            # unique_id = client.unique_id(user_provided_id)

            unique_id = input("Enter unique id: ")  # Get the unique ID from the user
            #await client.send_request(f"ID {unique_id}")  # Send the unique ID to the server


            command = input('Enter command (CREATE, EDIT, DELETE, WRITE, EXIT): ').upper()
            if command == 'EXIT':
                client.close_connection()
                break

            elif command == 'CREATE':
                filename = input('Enter filename: ')
                await client.create(filename, unique_id)
            elif command == 'EDIT':
                filename = input('Enter filename: ')
                new_content = input('Enter new content: ')
                await client.edit(filename, new_content)
            elif command == 'DELETE':
                filename = input('Enter filename: ')
                await client.delete(filename)
            # elif command == 'READ':
            #     filename = input('Enter filename: ')
            #     await client.read(filename)
            elif command == 'WRITE':
                filename = input('Enter filename: ')
                content = input('Enter content: ')
                await client.write(filename, content, unique_id)
            else:
                print('Invalid command')

if __name__ == "__main__":
    client = FileClient('127.0.0.1', 12345)
    asyncio.run(client.client_input())

